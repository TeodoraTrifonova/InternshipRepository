		HOW TO WRITE GOOD SOFTWARE

WHAT GOOD IS SOFTWARE:  
- FUNCTIONAL
- ROBUST
- MEASURABLE
- DEBUGGABLE
- MAINTANABLE
- REUSABLE
- EXPEDEBLE


S.O.L.I.D PRINCIPLES
S - single responsibility principle
O - open-closed principle
L - liskov substitution principle
I - interface segregation principle
D - dependency inversion principle


Single responsibility principle
- every module or class should have roponsibility over a single part of the functionality 
provided by the software and that responsibility should be entirely encapsulated by the class


Open-closed principle
- The open-closed design principle says that software entities like classes,
 modules, functions, etc... should be open for extention 
but closed for modification


Liskov substitution principle
- The princinciple defines that objects of a superclass shall be
replacable with all of its subclasses without 
causing problems on the app

Interface segregation principle
- Clients shoul not be forced to implement unnesesarry methods which they will not use

Dependency inversion principle
- "Depend on abstractions, not on concretions"
- We should design our software in such a way that varuious modules can be 
separated from each other using an abstract layer to bind them together


-Dependency injection (DI) is a design pattern that implements invesion of
control principle for resolving dependencies. It allows a programmer to 
remove hard codded dependencies so that the application becomes loosely
 coupled and extendable








